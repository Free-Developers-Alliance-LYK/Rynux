# SPDX-License-Identifier: GPL-2.0
#
# ---------------------------------------------------------------------------

proc_macros_prepare:
	$(Q)$(MAKE) $(build)=proc_macros prepare

rustdoc-macros:
	$(Q)$(MAKE) $(build)=proc_macros rustdoc

# =========================Basic lib ===========================
#
# `$(rust_flags)` is passed in case the user added `--sysroot`.
rustc_sysroot := $(shell MAKEFLAGS= $(RUSTC) $(rust_flags) --print sysroot)
rustc_host_target := $(shell $(RUSTC) --version --verbose | grep -F 'host: ' | cut -d' ' -f2)
RUST_LIB_SRC ?= $(rustc_sysroot)/lib/rustlib/src/rust/library

core-cfgs = \
    --cfg no_fp_fmt_parse

redirect-intrinsics = \
	__addsf3 __eqsf2 __extendsfdf2 __gesf2 __lesf2 __ltsf2 __mulsf3 __nesf2 __truncdfsf2 __unordsf2 \
	__adddf3 __eqdf2 __ledf2 __ltdf2 __muldf3 __unorddf2 \
	__muloti4 __multi3 \
	__udivmodti4 __udivti3 __umodti3

ifneq ($(or $(CONFIG_ARM64),$(and $(CONFIG_RISCV),$(CONFIG_64BIT))),)
	# These intrinsics are defined for ARM64 and RISCV64
	redirect-intrinsics += \
		__ashrti3 \
		__ashlti3 __lshrti3
endif

$(obj)/core.o: private skip_clippy = 1
$(obj)/core.o: private skip_flags = -Wunreachable_pub
$(obj)/core.o: private rustc_objcopy = $(foreach sym,$(redirect-intrinsics),--redefine-sym $(sym)=__rust$(sym))
$(obj)/core.o: private rustc_target_flags = $(core-cfgs)
$(obj)/core.o: $(RUST_LIB_SRC)/core/src/lib.rs proc_macros_prepare \
    $(wildcard $(objtree)/include/config/RUSTC_VERSION_TEXT) FORCE
	+$(call if_changed_rule,rustc_library)

# Starting with Rust 1.82.0, skipping `-Wrustdoc::unescaped_backticks` should
# not be needed -- see https://github.com/rust-lang/rust/pull/128307.
rustdoc-core: private skip_flags = -Wrustdoc::unescaped_backticks
rustdoc-core: private rustc_target_flags = $(core-cfgs)
rustdoc-core: $(RUST_LIB_SRC)/core/src/lib.rs rustdoc-macros FORCE
	echo "Generating core documentation"
	+$(call if_changed,rustdoc)

$(obj)/compiler_builtins.o: private rustc_objcopy = -w -W '__*'
$(obj)/compiler_builtins.o: $(src)/compiler_builtins.rs $(obj)/core.o FORCE
	+$(call if_changed_rule,rustc_library)

rustdoc-compiler_builtins: $(src)/compiler_builtins.rs rustdoc-core FORCE
	+$(call if_changed,rustdoc)

base_libs= $(obj)/core.o $(obj)/compiler_builtins.o

# ------------------------------------- const_format ------------------------
$(obj)/const_format.o: private skip_flags = -Wunreachable_pub
$(obj)/const_format.o: private rustc_target_flags = --extern const_format_proc_macros
$(obj)/const_format.o: $(src)/const_format/src/lib.rs  $(base_libs) FORCE
	+$(call if_changed_rule,rustc_library)

rusttestlib-const_format: private skip_flags = -Wunreachable_pub
rusttestlib-const_format: private rustc_target_flags = --extern const_format_proc_macros
rusttestlib-const_format: $(src)/const_format/src/lib.rs  FORCE
	+$(call if_changed,rustc_test_library)


rustdoc-const_format: private skip_flags = -Wunreachable_pub
rustdoc-const_format: private rustc_target_flags = --extern const_format_proc_macros
rustdoc-const_format: $(src)/const_format/src/lib.rs  FORCE
	+$(call if_changed,rustdoc)

# ------------------------------------- static assertions ------------------------
$(obj)/static_assertions.o: private rustc_target_flags = --extern static_assertions_proc_macros
$(obj)/static_assertions.o: $(src)/static_assertions-1.1.0/src/lib.rs $(base_libs) FORCE
	+$(call if_changed_rule,rustc_library)

rusttestlib-static_assertions: private rustc_target_flags = --extern static_assertions_proc_macros
rusttestlib-static_assertions: $(src)/static_assertions-1.1.0/src/lib.rs  FORCE
	+$(call if_changed,rustc_test_library)


rustdoc-static_assertions: private rustc_target_flags = --extern static_assertions_proc_macros
rustdoc-static_assertions: $(src)/static_assertions-1.1.0/src/lib.rs  FORCE
	+$(call if_changed,rustdoc)

# --------------------------------------------- bitflags -------------------
$(obj)/bitflags.o: private skip_flags = -Wunreachable_pub
$(obj)/bitflags.o: $(src)/bitflags/src/lib.rs  $(base_libs) FORCE
	+$(call if_changed_rule,rustc_library)

rusttestlib-bitflags: private skip_flags = -Wunreachable_pub
rusttestlib-bitflags: $(src)/bitflags/src/lib.rs  FORCE
	+$(call if_changed,rustc_test_library)

rustdoc-bitflags: private skip_flags = -Wunreachable_pub
rustdoc-bitflags: $(src)/bitflags/src/lib.rs  FORCE
	+$(call if_changed,rustdoc)

# ----------------------------------tock registers ------------------------
tock_cfg = --cfg 'feature="register_types"'
tock_skip_flags = -Wunreachable_pub -Wmissing_docs
tock_target_flags = $(tock_cfg) -Aelided-lifetimes-in-paths

$(obj)/tock_registers.o: private skip_flags = $(tock_skip_flags)
$(obj)/tock_registers.o: private rustc_target_flags = $(tock_target_flags)
$(obj)/tock_registers.o: $(src)/tock-registers-0.10.0/src/lib.rs  $(base_libs) FORCE
	+$(call if_changed_rule,rustc_library)

rusttestlib-tock_registers: private skip_flags = $(tock_skip_flags)
rusttestlib-tock_registers: private rustc_target_flags = $(tock_target_flags)
rusttestlib-tock_registers: $(src)/tock-registers-0.10.0/src/lib.rs  FORCE
	+$(call if_changed,rustc_test_library)


rustdoc-tock_registers: private skip_flags = $(tock_skip_flags)
rustdoc-tock_registers: private rustc_target_flags = $(tock_target_flags)
rustdoc-tock_registers: $(src)/tock-registers-0.10.0/src/lib.rs  FORCE
	+$(call if_changed,rustdoc)

# ------------------------------- fdt ---------------------
fdt_skip_flags = -Wunreachable_pub -Wmissing_docs  -Dwarnings

$(obj)/fdtree_rs.o: $(obj)/fdtree-rs/src/lib.rs $(base_libs) FORCE
	+$(call if_changed_rule,rustc_library)
$(obj)/fdtree_rs.o: private skip_flags = $(fdt_skip_flags)

rusttestlib-fdtree_rs: private skip_flags = $(fdt_skip_flags)
rusttestlib-fdtree_rs: $(src)/fdtree-rs/src/lib.rs  FORCE
	+$(call if_changed,rustc_test_library)

rustdoc-fdtree_rs: private skip_flags = $(fdt_skip_flags)
rustdoc-fdtree_rs: $(src)/fdtree-rs/src/lib.rs  FORCE
	+$(call if_changed,rustdoc)

# ------------------------------- cfg_if ---------------------

$(obj)/cfg_if.o: $(src)/cfg-if-1.0.3/src/lib.rs $(base_libs) FORCE
	+$(call if_changed_rule,rustc_library)

rusttestlib-cfg_if: $(src)/cfg-if-1.0.3/src/lib.rs FORCE
	+$(call if_changed,rustc_test_library)

rustdoc-cfg_if: $(src)/cfg-if-1.0.3/src/lib.rs FORCE
	+$(call if_changed,rustdoc)

# -------------------------------- rusttest libraries ---------------------

rusttest: rusttestlib-const_format rusttestlib-static_assertions \
	rusttestlib-bitflags rusttestlib-tock_registers rusttestlib-fdtree_rs \
	rusttestlib-cfg_if


# ------------------------------- rustdoc----------------------
rustdoc: rustdoc-core rustdoc-compiler_builtins rustdoc-macros \
	rustdoc-const_format rustdoc-static_assertions rustdoc-bitflags \
	rustdoc-tock_registers rustdoc-fdtree_rs rustdoc-cfg_if


rust-analyzer:
	$(Q)MAKEFLAGS= $(srctree)/scripts/generate_rust_analyzer.py \
    --cfgs='core=$(core-cfgs)' 2024 \
    $(realpath $(srctree)) $(realpath $(objtree)) \
    $(rustc_sysroot) $(RUST_LIB_SRC) \
    > $(srctree)/rust-project.json


# Ordinary directory descending
# ---------------------------------------------------------------------------
obj-y			+= core.o
obj-y			+= compiler_builtins.o
obj-y 			+= const_format.o
obj-y 			+= static_assertions.o
obj-y 			+= bitflags.o
obj-y 			+= tock_registers.o
obj-y 			+= fdtree_rs.o
obj-y 			+= cfg_if.o
