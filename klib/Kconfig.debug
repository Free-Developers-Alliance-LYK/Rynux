# SPDX-License-Identifier: GPL-2.0-only
menu "Kernel hacking"

config ARCH_WANT_FRAME_POINTERS
	bool

config FRAME_POINTER
	bool "Compile the kernel with frame pointers"
	default y if ARCH_WANT_FRAME_POINTERS
	help
	  If you say Y here the resulting kernel image will be slightly
	  larger and slower, but it gives very useful debugging information
	  in case of kernel bugs. (precise oopses/stacktraces/warnings)

config RUST_DEBUG_ASSERTIONS
	bool "Debug assertions"
	help
	  Enables rustc's `-Cdebug-assertions` codegen option.

	  This flag lets you turn `cfg(debug_assertions)` conditional
	  compilation on or off. This can be used to enable extra debugging
	  code in development but not in production. For example, it controls
	  the behavior of the standard library's `debug_assert!` macro.

	  Note that this will apply to all Rust code, including `core`.

	  If unsure, say N.

config RUST_OVERFLOW_CHECKS
	bool "Overflow checks"
	default y
	help
	  Enables rustc's `-Coverflow-checks` codegen option.

	  This flag allows you to control the behavior of runtime integer
	  overflow. When overflow-checks are enabled, a Rust panic will occur
	  on overflow.

	  Note that this will apply to all Rust code, including `core`.

	  If unsure, say Y.

config RUST_BUILD_ASSERT_ALLOW
	bool "Allow unoptimized build-time assertions"
	help
	  Controls how `build_error!` and `build_assert!` are handled during the build.

	  If calls to them exist in the binary, it may indicate a violated invariant
	  or that the optimizer failed to verify the invariant during compilation.

	  This should not happen, thus by default the build is aborted. However,
	  as an escape hatch, you can choose Y here to ignore them during build
	  and let the check be carried at runtime (with `panic!` being called if
	  the check fails).

	  If unsure, say N.

config VMLINUX_MAP
	bool "Generate vmlinux.map file when linking"
	depends on EXPERT
	help
	  Selecting this option will pass "-Map=vmlinux.map" to ld
	  when linking vmlinux. That file can be useful for verifying
	  and debugging magic section games, and for seeing which
	  pieces of code get eliminated with
	  CONFIG_LD_DEAD_CODE_DATA_ELIMINATION.



endmenu # Kernel hacking
